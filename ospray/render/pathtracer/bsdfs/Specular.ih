// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"

struct Specular
{
  BSDF super;

  float ns; // exponent
};

inline BSDF_EvalRes Specular_eval(const varying BSDF* uniform super,
                                  const vec3f& wo, const vec3f& wi)
{
  const varying Specular* uniform self = (const varying Specular* uniform)super;

  BSDF_EvalRes res;
  float cosThetaI = max(dot(wi, getN(super)), 0.f);
  res.pdf = powerCosineSampleHemispherePDF(cosThetaI, self->ns);
  res.value = self->super.albedo * res.pdf;
  return res;
}

inline BSDF_SampleRes Specular_sample(const varying BSDF* uniform super,
                                      const vec3f& wo, const vec2f& s, float ss)
{
  const varying Specular* uniform self = (const varying Specular* uniform)super;

  const vec3f localDir = powerCosineSampleHemisphere(self->ns, s);
  BSDF_SampleRes res;
  res.wi = getFrame(super) * localDir;
  res.pdf = powerCosineSampleHemispherePDF(localDir, self->ns);
  res.type = BSDF_GLOSSY_REFLECTION;
  res.weight = self->super.albedo;
  return res;
}

inline void Specular_Constructor(varying Specular* uniform self,
                                 const varying linear3f* uniform frame,
                                 vec3f R,
                                 float exp_)
{
  BSDF_Constructor(&self->super, R, BSDF_GLOSSY_REFLECTION,
                   Specular_eval, Specular_sample, frame);

  self->ns = exp_;
}

inline varying BSDF* uniform Specular_create(uniform ShadingContext* uniform ctx,
                                             const varying linear3f* uniform frame,
                                             vec3f R,
                                             float exp_)
{
  varying Specular* uniform self =
    (varying Specular* uniform)ShadingContext_alloc(ctx, sizeof(Specular));
  Specular_Constructor(self, frame, R, exp_);
  return &self->super;
}
